apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ template "fullname" . }}
  labels:
    app: {{ template "fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  template:
    metadata:
      labels:
        app: {{ template "fullname" . }}
    spec:
      affinity:
      {{- include "nodeaffinity" . | indent 6 }}
      containers:
      - name: {{ template "fullname" . }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ default "" .Values.image.pullPolicy | quote }}
        env:
        - name: POSTGRESQL_USER
          value: {{ default "postgres" .Values.database.user | quote }}
          # Required for pg_isready in the health probes.
        - name: PGUSER
          value: {{ default "postgres" .Values.database.user | quote }}
        - name: POSTGRESQL_DATABASE
          value: {{ default "" .Values.database.name | quote }}
        - name: POSTGRES_INITDB_ARGS
          value: {{ default "" .Values.database.initdbArgs | quote }}
        - name: POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "fullname" . }}
              key: password
        - name: POD_IP
          valueFrom: { fieldRef: { fieldPath: status.podIP } }
        readinessProbe:
          tcpSocket:
            port: 5432
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          tcpSocket:
            port: 5432
          initialDelaySeconds: 15
          periodSeconds: 20 
        ports:
        - name: postgresql
          containerPort: 5432
        # set liveness probe to determine if container needs to be restarted
        # - command, http, or tcp
        # ref : https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
        resources:
{{ toYaml .Values.resources | indent 10 }}
        volumeMounts:
        - name: "{{ template "fullname" . }}-{{ .Values.dataVolume.name }}"
          mountPath: /database
      volumes:
      - name: "{{ template "fullname" . }}-{{ .Values.dataVolume.name }}"    
      {{- if .Values.persistence.enabled }}
        persistentVolumeClaim:
        {{- if .Values.dataVolume.existingClaimName }}
          claimName: {{ .Values.dataVolume.existingClaimName }}
        {{- else }}
          claimName: {{ template "fullname" . }}-{{ .Values.dataVolume.name }}
        {{- end }}
      {{- else }}
        emptyDir: {}
      {{- end }}
